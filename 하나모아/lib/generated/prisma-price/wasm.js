
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.RealTimePriceScalarFieldEnum = {
  id: 'id',
  asset: 'asset',
  currentPrice: 'currentPrice',
  changeValue: 'changeValue',
  changeRatio: 'changeRatio',
  isUp: 'isUp',
  round: 'round',
  time: 'time',
  rawDateTime: 'rawDateTime',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt'
};

exports.Prisma.DailyPriceScalarFieldEnum = {
  id: 'id',
  asset: 'asset',
  date: 'date',
  close: 'close',
  diff: 'diff',
  ratio: 'ratio',
  createdAt: 'createdAt'
};

exports.Prisma.ChartPriceScalarFieldEnum = {
  id: 'id',
  asset: 'asset',
  price: 'price',
  degreeCount: 'degreeCount',
  dateTime: 'dateTime',
  createdAt: 'createdAt'
};

exports.Prisma.GoldPredictionScalarFieldEnum = {
  id: 'id',
  asset: 'asset',
  predictionDate: 'predictionDate',
  direction: 'direction',
  confidence: 'confidence',
  probability: 'probability',
  nextDayPrediction: 'nextDayPrediction',
  basedOnDays: 'basedOnDays',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.RealTimePriceOrderByRelevanceFieldEnum = {
  id: 'id',
  asset: 'asset',
  round: 'round',
  time: 'time',
  rawDateTime: 'rawDateTime'
};

exports.Prisma.DailyPriceOrderByRelevanceFieldEnum = {
  id: 'id',
  asset: 'asset',
  date: 'date'
};

exports.Prisma.ChartPriceOrderByRelevanceFieldEnum = {
  id: 'id',
  asset: 'asset',
  dateTime: 'dateTime'
};

exports.Prisma.GoldPredictionOrderByRelevanceFieldEnum = {
  id: 'id',
  asset: 'asset',
  predictionDate: 'predictionDate',
  direction: 'direction'
};


exports.Prisma.ModelName = {
  RealTimePrice: 'RealTimePrice',
  DailyPrice: 'DailyPrice',
  ChartPrice: 'ChartPrice',
  GoldPrediction: 'GoldPrediction'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/garlic/Desktop/무제 폴더 5/HanaFinal/lib/generated/prisma-price",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin-arm64",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/Users/garlic/Desktop/무제 폴더 5/HanaFinal/prisma-price/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null
  },
  "relativePath": "../../../prisma-price",
  "clientVersion": "6.17.1",
  "engineVersion": "272a37d34178c2894197e17273bf937f25acdeac",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "mysql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "PRICE_DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// 가격 및 예측 데이터 전용 데이터베이스 스키마\n// 별도 Railway MySQL 서버에서 운영\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../lib/generated/prisma-price\"\n}\n\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"PRICE_DATABASE_URL\")\n}\n\n// 실시간 가격 정보\nmodel RealTimePrice {\n  id           String   @id @default(cuid())\n  asset        String   @unique\n  currentPrice Float\n  changeValue  Float\n  changeRatio  Float\n  isUp         Int\n  round        String\n  time         String\n  rawDateTime  String\n  updatedAt    DateTime @default(now()) @updatedAt\n  createdAt    DateTime @default(now())\n\n  @@map(\"real_time_prices\")\n}\n\n// 일별 가격 정보\nmodel DailyPrice {\n  id        String   @id @default(cuid())\n  asset     String\n  date      String\n  close     Float\n  diff      Float\n  ratio     Float\n  createdAt DateTime @default(now())\n\n  @@unique([asset, date])\n  @@index([asset, date])\n  @@map(\"daily_prices\")\n}\n\n// 차트용 가격 정보\nmodel ChartPrice {\n  id          String   @id @default(cuid())\n  asset       String\n  price       Float\n  degreeCount Int\n  dateTime    String\n  createdAt   DateTime @default(now())\n\n  @@unique([asset, dateTime, degreeCount], name: \"asset_dateTime_degreeCount\")\n  @@index([asset, dateTime])\n  @@map(\"chart_prices\")\n}\n\n// 금 가격 예측 결과\nmodel GoldPrediction {\n  id                String   @id @default(cuid())\n  asset             String   @default(\"gold\")\n  predictionDate    String // 예측 날짜 (YYYY-MM-DD)\n  direction         String // 상승/하락\n  confidence        Float // 신뢰도 (0.0 ~ 1.0)\n  probability       Float // 예측 확률 (0.0 ~ 1.0)\n  nextDayPrediction Int // 다음날 예측 (1: 상승, 0: 하락)\n  basedOnDays       Int // 분석 기간 (일수)\n  createdAt         DateTime @default(now())\n  updatedAt         DateTime @updatedAt\n\n  @@unique([asset, predictionDate])\n  @@index([predictionDate])\n  @@map(\"gold_predictions\")\n}\n",
  "inlineSchemaHash": "1535882f76116e5b8502ac8607777a447ed14629a819e4e942737780555301be",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"RealTimePrice\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"asset\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"currentPrice\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"changeValue\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"changeRatio\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"isUp\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"round\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"time\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rawDateTime\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"real_time_prices\"},\"DailyPrice\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"asset\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"date\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"close\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"diff\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"ratio\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"daily_prices\"},\"ChartPrice\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"asset\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"degreeCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"dateTime\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"chart_prices\"},\"GoldPrediction\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"asset\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"predictionDate\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"direction\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"confidence\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"probability\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"nextDayPrediction\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"basedOnDays\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"gold_predictions\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    PRICE_DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['PRICE_DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.PRICE_DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

