// 한국 금 거래소 데이터베이스 스키마

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma-price"
}

datasource db {
  provider = "mysql"
  url      = env("PRICE_DATABASE_URL")
}

model RealTimePrice {
  id           String   @id @default(cuid())
  asset        String   @unique
  currentPrice Float
  changeValue  Float
  changeRatio  Float
  isUp         Int
  round        String
  time         String
  rawDateTime  String
  updatedAt    DateTime @default(now()) @updatedAt
  createdAt    DateTime @default(now())

  @@map("real_time_prices")
}

model DailyPrice {
  id        String   @id @default(cuid())
  asset     String
  date      String
  close     Float
  diff      Float
  ratio     Float
  createdAt DateTime @default(now())

  @@unique([asset, date])
  @@index([asset, date])
  @@map("daily_prices")
}

model ChartPrice {
  id          String   @id @default(cuid())
  asset       String
  price       Float
  degreeCount Int
  dateTime    String
  createdAt   DateTime @default(now())

  @@unique([asset, dateTime, degreeCount], name: "asset_dateTime_degreeCount")
  @@index([asset, dateTime])
  @@map("chart_prices")
}

model GoldPrediction {
  id                String   @id @default(cuid())
  asset             String   @default("gold")
  predictionDate    String   
  direction         String  
  confidence        Float   
  probability       Float    
  nextDayPrediction Int      
  basedOnDays       Int      
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([asset, predictionDate])
  @@index([predictionDate])
  @@map("gold_predictions")
}

model Product {
  id          String   @id @default(cuid())
  name        String   
  category    String  
  price       Float   
  image       String   
  description String   
  material    String  
  weight      Float    
  goldContent Float    
  processingFee Float  
  isActive    Boolean  @default(true) 
  isNew       Boolean  @default(false) 
  isPopular   Boolean  @default(false) 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  exchanges   ProductExchange[]
  reviews     ProductReview[] 
  
  @@map("products")
}

model ProductExchange {
  id          String   @id @default(cuid())
  userId      String  
  productId   String   
  quantity    Int     
  goldAmount  Float    
  processingFee Float  
  totalCost   Float    
  status      ProductExchangeStatus @default(PENDING) 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([productId])
  @@index([status])
  @@index([createdAt])
  @@map("product_exchanges")
}

model ProductReview {
  id        String   @id @default(cuid())
  userId    String   
  productId String  
  rating    Int     
  content   String? 
  images    String?  
  isVisible Boolean  @default(true) 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([productId])
  @@index([rating])
  @@index([createdAt])
  @@map("product_reviews")
}

enum ProductExchangeStatus {
  PENDING  
  PROCESSING 
  COMPLETED 
  CANCELLED 
}


